"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q9a0#d$fxku$)oe9mt(5m2d0wb39vusdn8l*k^nilq(ohpbt%6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #子应用的注册
    'users.apps.UsersConfig',
    'home.apps.HomeConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST':'127.0.0.1',
        'port': '3306',
        'USER':'blog',
        'PASSWORD':'123456',
        'NAME': 'blog',

    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans' #''en-us'

TIME_ZONE = 'Asia/Shanghai' #'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
#设置静态资源的路径
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Redis缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': ['redis://127.0.0.1:6379/0'],
        # 'KEY_PREFIX': 'session',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTTON_POOL_KWARGS': {
                'max_connections': 128,
            },
            # 'PASSWORD': '1qaz2wsx',
        },
    },
    'session': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': ['redis://127.0.0.1:6379/1'],
            # 'KEY_PREFIX': 'session:code',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTTON_POOL_KWARGS': {
                    'max_connections': 128,
                },
                # 'PASSWORD': '1qaz2wsx',
            },
        }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'session'
SESSION_COOKIE_AGE = 86400

# 日志配置
# import os
# BASE_LOG_DIR = os.path.join(BASE_DIR , "log")   # logging日志文件配置的位置
LOGGING = {
    'version': 1,  # 保留字段
    'disable_existing_loggers': False,      # 不要禁用已经存在的logger实例
    'formatters': {     # 定义三种日志显示的格式
        'standard': {
            'format': '[%(levelname)s][%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(module)s][%(filename)s:%(lineno)d]'
                      '[%(message)s]'
        },
        'verbose': {
            'format': '[%(levelname)s][%(asctime)s][%(module)s][%(filename)s:%(lineno)d][%(message)s]'
        },
        'simple': {
            'format': '[%(levelname)s][%(filename)s:%(lineno)d][%(message)s]'
        },
        'collect': {
            'format': '[%(levelname)s][%(message)s]'
        }
    },
    'filters': {    # 定义一个过滤规则
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # ():括弧代表在任意时刻都执行
        },
    },
    'handlers': {  # 日志流的处理方式
        'console': {    # 把日志打印到终端时设置的参数
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, "logs/default.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 500,  # 日志大小 500M
            'backupCount': 3,  #
            'formatter': 'standard',
            'encoding': 'utf-8',    # 设置编码是为了防止中文编码混乱
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, "logs/error.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 500,  # 日志大小 500M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'collect': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切换文件保存
            'filename': os.path.join(BASE_DIR, "logs/collect.log"),
            'maxBytes': 1024 * 1024 * 500,  # 日志大小 500M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        }
    },
    'loggers': {
       # 默认的logger应用如下配置
        'djangologger': {
            'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,      # propagate：是否向父级logger实例传递日志信息
        },
        # 名为 'collect'的logger还单独处理
        'collect': {
            'handlers': ['console', 'collect'],
            'level': 'INFO',
        }
    },
}
#自定义user类
#制定系统的User来使用自定义的用户模型类
#配置信息为’子应用名‘。’模型class类名‘
AUTH_USER_MODEL = 'users.User'

#修改系统的未登录跳转路径
LOGIN_URL = '/login/'

#设置上传图片 保存到media目录下
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#设置图片访问的同一路由
MEDIA_URL = '/media/'